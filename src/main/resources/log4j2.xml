<?xml version="1.0" encoding="UTF-8"?>
<!-- 日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!-- status：这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出。 -->
<!-- monitorInterval : Log4j2能够自动检测修改配置文件和重新配置本身，设置间隔秒数，单位是s,最小是5s。 -->
<Configuration status="WARN" monitorInterval="30">
    <!--全局属性-->
    <Properties>
        <Property name="APP_NAME">backup-manager</Property>
        <!--设置日志文件存储路径为${env:CATALINA_HOME}/logs/${APP_NAME}-->
        <Property name="LOG_FILE_PATH">logs/${APP_NAME}</Property>
        <!--设置日志输出格式-->
<!--        <Property name="PATTERN_FORMAT">%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %C{36} %L %M - %msg%xEx%n</Property>-->
        <Property name="PATTERN_FORMAT">%d{yyyy-MM-dd HH:mm:ss.SSS} - %msg%xEx%n</Property>
    </Properties>

    <!--配置输出源-->
    <Appenders>
        <!-- Console节点 配置控制台日志输出：
            name:指定Appender的名字.
            target: SYSTEM_OUT 或 SYSTEM_ERR,一般只设置默认:SYSTEM_OUT.
            PatternLayout: 输出格式，不设置默认为:%m%n.
        -->
        <Console name="Console" target="SYSTEM_OUT">
            <!-- ThresholdFilter 过滤器：
                控制台只输出level及以上级别的信息(onMatch),其他的直接拒绝(onMismatch)
                日志的级别： ALL< Trace < DEBUG < INFO < WARN < ERROR < FATAL < OFF。
            -->
            <ThresholdFilter level="TRACE" onMatch="ACCEPT" onMismatch="DENY"/>
            <!-- PatternLayout 日志输出格式模板：
                %d{yyyy-MM-dd HH:mm:ss.SSS} 日志生成时间。
                %-5level 日志级别(级别从左显示5个字符宽度)。
                %logger{36} 表示logger名字最长36个字符,否则按照句点分割。
                %L 日志输出所在行数 日志输出所在行数
                [%t] 输出产生该日志事件的线程名
                %msg 日志消息
                %n 是换行符
                eg:"2017-04-17 16:04:02.312 INFO  com.zte.lucene.tools.DateUtils2Joda:424 [main] - Info Message!"
            -->
            <PatternLayout pattern="${PATTERN_FORMAT}"/>
        </Console>

        <!--输出info日志到文件，filePattern旧日志另存文件名-->
        <RollingFile name="RollingInfoFile" fileName="${LOG_FILE_PATH}/info.log" filePattern="${LOG_FILE_PATH}/$${date:yyyyMM}/info-%d{yyyyMMdd}-%i.log.gz">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <Filters>
                <ThresholdFilter level="warn" onMatch="DENY" onMismatch="NEUTRAL"/>
                <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
            <PatternLayout>
                <pattern>${PATTERN_FORMAT}</pattern>
            </PatternLayout>
            <Policies>
                <!-- rollover on startup, daily and when the file reaches 10 MegaBytes -->
                <!--当系统重启/日期更新/超过100M将会覆盖文件-->
                <OnStartupTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="100 MB"/>
                <TimeBasedTriggeringPolicy/>
            </Policies>
        </RollingFile>
    </Appenders>

    <!--然后定义logger，只有定义了logger并引入的appender，appender才会生效-->
    <Loggers>
        <!--过滤掉spring的一些无用的DEBUG信息-->
        <logger name="org.springframework" level="INFO"/>
        <!-- 配置日志的根节点 -->
        <!-- level="ALL" 只能够输出level级别是all及all以上的-->
        <root level="DEBUG">
            <AppenderRef ref="Console"/>
            <!--<AppenderRef ref="RollingInfoFile"/>-->
        </root>
    </Loggers>
</Configuration>
